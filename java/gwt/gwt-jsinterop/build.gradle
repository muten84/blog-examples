buildscript {
	repositories {
		mavenLocal()
		maven {
			url snapshots
			credentials{
				username mavenUser
				password mavenPassword
			}
			artifactUrls artifactoryContextUrl+"repo/"
		}
		maven {
			url releases
			credentials{
				username mavenUser
				password mavenPassword
			}
			artifactUrls artifactoryContextUrl+"repo/"
		}
	}
	dependencies {
		classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6'
		if(project.hasProperty('jfrogArtifactoryVersion')){
			println "Jfrog property defined"
			classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: jfrogArtifactoryVersion)
		}
		else{
			println "Jfrog property NOT defined"
			classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '3.0.1')
		}
	}
	dependencies {
		ant.unjar src: configurations.classpath.find { it.name.startsWith("common-gradle") }, dest: 'build/gradle'
	}
}
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'gwt'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

dependencies {

    compile 'org.slf4j:slf4j-api:1.7.13'
    testCompile 'junit:junit:4.12'
}

//http://steffenschaefer.github.io/gwt-gradle-plugin/doc/0.1/
gwt {
	gwtVersion="2.8.0-beta1"	
	modules 'it.luigibifulco.jsinterop.JsInteropModule'
	  compiler {        
      //  generateJsInteropExports  = true
      //args '-XjsInteropMode'
    }
    superDev  {
		//args '-XjsInteropMode'
		//args 'JS_RC'
	}
}



compileGwt {
    args '-generateJsInteropExports'
    minHeapSize = "1512M";
	maxHeapSize = "1512M";
    //args 'true'
}

eclipse {
	jdt {
		sourceCompatibility = '1.8'
		targetCompatibility = '1.8'
	}
	classpath{		
		containers.add('com.google.gwt.eclipse.core.GWT_CONTAINER')
		//containers.add('org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/'+executionEnvironment)
		defaultOutputDir = file('src/main/webapp/WEB-INF/classes')
	}
	project{
		//natures 'org.springsource.ide.eclipse.gradle.core.nature', 'org.eclipse.jdt.core.javanature', 'com.google.gdt.eclipse.core.webAppNature', 'com.google.gwt.eclipse.core.gwtNature'
		natures 'org.eclipse.buildship.core.gradleprojectnature', 'org.eclipse.jdt.core.javanature', 'com.google.gdt.eclipse.core.webAppNature', 'com.google.gwt.eclipse.core.gwtNature'
		
	}
}

//Missing required argument 'module[s]'
//Google Web Toolkit 2.8.0-beta1
//DevMode [-[no]startServer] [-port port-number | "auto"] [-logdir directory] [-logLevel (ERROR|WARN|INFO|TRACE|DEBUG|SPAM|ALL)] [-gen dir] [-bindAddress host-name-or-address] [-codeServerPort port-number | "auto"] [-[no]superDevMode] [-server servletContainerLauncher[:args]] [-startupUrl url] [-war dir] [-deploy dir] [-extra dir] [-modulePathPrefix ] [-workDir dir] [-XmethodNameDisplayMode (NONE|ONLY_METHOD_NAME|ABBREVIATED|FULL)] [-sourceLevel [auto, 1.7, 1.8]] [-XjsInteropMode (JS|JS_RC)] [-[no]generateJsInteropExports] [-[no]incremental] [-setProperty name=value,value...] module[s] 

//where 
//  -[no]startServer               Starts a servlet container serving the directory specified by the -war flag. (defaults to ON)
//  -port                          Specifies the TCP port for the embedded web server (defaults to 8888)
//  -logdir                        Logs to a file in the given directory, as well as graphically
//  -logLevel                      The level of logging detail: ERROR, WARN, INFO, TRACE, DEBUG, SPAM or ALL (defaults to INFO)
//  -gen                           Debugging: causes normally-transient generated types to be saved in the specified directory
//  -bindAddress                   Specifies the bind address for the code server and web server (defaults to 127.0.0.1)
//  -codeServerPort                Specifies the TCP port for the code server (defaults to 9997 for classic Dev Mode or 9876 for Super Dev Mode)
//  -[no]superDevMode              Runs Super Dev Mode instead of classic Development Mode. (defaults to ON)
//  -server                        Specify a different embedded web server to run (must implement ServletContainerLauncher)
//  -startupUrl                    Automatically launches the specified URL
//  -war                           The directory into which deployable output files will be written (defaults to 'war')
//  -deploy                        The directory into which deployable but not servable output files will be written (defaults to 'WEB-INF/deploy' under the -war directory/jar, and may be the same as the -extra directory/jar)
//  -extra                         The directory into which extra files, not intended for deployment, will be written
//  -modulePathPrefix              The subdirectory inside the war dir where DevMode will create module directories. (defaults empty for top level)
//  -workDir                       The compiler's working directory for internal use (must be writeable; defaults to a system temp dir)
//  -XmethodNameDisplayMode        EXPERIMENTAL: Specifies method display name mode for chrome devtools: NONE, ONLY_METHOD_NAME, ABBREVIATED or FULL (defaults to NONE)
//  -sourceLevel                   Specifies Java source level (defaults to auto:1.8)
//  -XjsInteropMode                EXPERIMENTAL: DEPRECATED: Specifies JsInterop mode: JS or JS_RC
//  -[no]generateJsInteropExports  Generate exports for JsInterop purposes (defaults to OFF)
//  -[no]incremental               Compiles faster by reusing data from the previous compile. (defaults to ON)
//  -setProperty                   Set the values of a property in the form of propertyName=value1[,value2...].
//and 
//  module[s]                      Specifies the name(s) of the module(s) to host
